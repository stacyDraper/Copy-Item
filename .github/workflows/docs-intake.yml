#!/usr/bin/env python3
import sys, os, subprocess, hashlib, shutil
from pathlib import Path

def sha256(p: Path) -> str:
    h = hashlib.sha256(); h.update(p.read_bytes()); return h.hexdigest()

def verify_manifest(folder: Path):
    mf = folder / "MANIFEST.sha256"
    if not mf.exists():
        print("[warn] No MANIFEST.sha256 in proposal; skipping hash verify.")
        return
    ok = True
    for raw in mf.read_text().splitlines():
        line = raw.strip()
        if not line: continue
        parts = line.split("  ", 1)  # "hash␠␠path"
        if len(parts) != 2:
            print("[ERR] Bad manifest line:", raw); ok = False; continue
        digest, name = parts
        fp = folder / name if not Path(name).is_absolute() else Path(name)
        if not fp.exists():
            print("[ERR] Missing file listed in manifest:", name); ok = False; continue
        if sha256(fp) != digest:
            print("[ERR] Hash mismatch for", name); ok = False
    if not ok: sys.exit(2)
    print("[ok] Proposal manifest verified.")

def apply_patches(folder: Path) -> bool:
    """Return True only if ALL patches apply cleanly. Otherwise skip patches."""
    pd = folder / "patches"
    if not pd.exists(): return False
    patches = sorted(pd.glob("*.diff"))
    if not patches: return False

    # Pre-check each patch
    for p in patches:
        print(f"[info] Checking patch: {p.name}")
        try:
            subprocess.run(["git", "apply", "--check", str(p)], check=True,
                           stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        except subprocess.CalledProcessError as e:
            msg = e.stderr.decode(errors="ignore") if e.stderr else ""
            print(f"[warn] Patch {p.name} not applicable; skipping all patches. {msg.strip()}")
            return False

    # All good → apply them
    for p in patches:
        print(f"[info] Applying patch: {p.name}")
        subprocess.run(["git", "apply", "--index", str(p)], check=True)
    return True

def apply_proposals(folder: Path):
    for prop in folder.glob("*-proposal.md"):
        target = prop.name.replace("-proposal", "")
        dst = (Path("docs") / target) if Path("docs").exists() else Path(target)
        dst.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy2(prop, dst)
        print("[ok] Wrote", dst)
    for extra in ["release_notes.md", "CHANGELOG.md"]:
        src = folder / extra
        if src.exists(): shutil.copy2(src, Path(extra))

def main():
    if len(sys.argv) != 2:
        print("usage: apply_proposal.py <proposal_folder>"); sys.exit(1)
    folder = Path(sys.argv[1]).resolve()
    if not folder.exists():
        print("proposal folder not found:", folder); sys.exit(1)

    verify_manifest(folder)

    used = False
    try:
        used = apply_patches(folder)
    except Exception as e:
        print(f"[warn] Patches threw exception; falling back to proposals. {e}")

    if not used:
        print("[info] Using proposal files instead of patches.")
        apply_proposals(folder)

    # Rebuild MANIFEST for repo/docs
    root = Path("docs") if Path("docs").exists() else Path(".")
    with open("MANIFEST.sha256","w",encoding="utf-8") as mf:
        for p in sorted(root.glob("*.md")):
            mf.write(f"{sha256(p)}  {p}\n")

if __name__ == "__main__":
    main()
